}else{
value=data[22,]
}
}else{
value=data[22,]
}
}
else if(valor_op>6)
{
value=data[23,]
}
else if(valor_op==6)
{
if(mano_op[1,2]==mano_op[2,2])
{
if(mano_op[1,1]==12 || mano_op[2,1]==12)
{
value=data[23,]
}else{
value=data[24,]
}
}else{
value=data[24,]
}
}
else if(valor_op==5.5)
{
value=data[24,]
}
else if(valor_op==5)
{
if(mano_op[1,1]==mano_op[2,1] && mano_op[2,1]==5)
{
value=data[24,]
}
else if(mano_op[1,1]==mano_op[2,1] && mano_op[2,1]!=5)
{
value=data[25,]
}
else if(mano_op[1,2]==mano_op[2,2])
{
if((mano_op[1,1]==9 && mano_op[2,1]==6)||((mano_op[2,1]==9 && mano_op[1,1]==6)))
{
value=data[26,]
}
else
{
value=data[25,]
}
}
else
{
if(abs(mano_op[1,1]-mano_op[2,1])>5)
{
value=data[27,]
}
else
{
value=data[26,]
}
}
}
else if(valor_op==4.5)
{
if(mano_op[1,2]==mano_op[2,2])
{
value=data[26,]
}else{
if((mano_op[1,1]-mano_op[2,1])==1)
{value=data[26,]}
else{
value=data[27,]
}
}
}
else if(valor_op==4)
{
if(mano_op[1,2]==mano_op[2,2])
{
if(mano_op[1,1]+mano_op[2,1]==20)
{
value=data[25,]
}
else
{
value=data[26,]
}
}
else
{
if(abs(mano_op[1,1]-mano_op[2,1])==2)
{
value=data[27,]
}
else
{
value=data[26,]
}
}
}
else if(valor_op==3.5)
{
if(mano_op[1,2]==mano_op[2,2])
{
if(abs(mano_op[1,1]-mano_op[2,1])==2)
{
value=data[25,]
}
else
{
value=data[26,]
}
}
else
{
if(abs(mano_op[1,1]-mano_op[2,1])==2)
{
value=data[27,]
}
else
{
value=data[8,]
}
}
}
else
{
value=data[27,]
}
}
else
{
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
j<-switch (valor_op+1,21,22,23,24,25,26,27,28,29,30)
value=data[j,]
}
}
triple_aux=rbind(triple_aux,c(as.numeric(combina[i,1]),as.numeric(combina[i,2]),as.numeric(combina[i,3]),as.numeric(combina[i,4]),as.numeric(value[1]),as.numeric(value[2]),as.numeric(value[3])))
}
triple_aux[45,]
triple<-igualaTriple(triple,triple_aux)
triple==triple_aux
triple<-igualaTriple(triple,triple_aux)
triple
triple_aux
triple_aux=triple_aux[-1,]
triple<-igualaTriple(triple,triple_aux)
triple_aux[45,]
triple<-igualaTriple(triple,triple_aux)
View(original)
View(nuevo)
View(original)
rownames(triple_aux)<-c()
View(triple_aux)
triple<-igualaTriple(triple,triple_aux)
triple<-igualaTriple(triple,triple_aux)
options(error=recover)
triple<-igualaTriple(triple,triple_aux)
ls()
dim(nuevo)
dim(original)
triple<-igualaTriple(triple,triple_aux)
inicializa()
triple<-igualaTriple(triple,triple_aux)
View(triple)
View(triple_aux)
View(triple_aux)
inicializa()
inicializa()
source("inicializa.R")
inicializa()
plumb(file='plumber.R')$run()
inicializa()
r<-plumb("plumber.R")
r$run(port=8000)
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
mesa<-read.csv("mesa.csv",header=TRUE, sep=",", row.names=NULL)
pesos<-cargaPesos()
triple<-cargaTriple()
mp=2
mp=3
mn=2
mesa<-fijarMesaPostflop(mesa,mn,mp)
mazo<-descarteCartas(mesa,mazo)
aa=43
ao=43
carta<-mesa[4,]
pesos<-descartePesosCarta(carta,mazo,pesos)
triple<-descarteTripleCarta(carta,mazo,triple)
triple<-calculoProbabilidadAccion(mesa,mazo,triple,3)
pesos<-actualizaPesos_op(1,pesos,triple)
salida<-calculaProbFlop(mano,mesa,mazo,pesos,aa,ao,1)
FM<-calcularFuerzaMano(mano,mesa,mazo,pesos)
VPT<-c(0,0,0)
VP<-matrix(0,nrow=3, ncol=3)
x=-1
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazosPot(mazo,pesos)
combina<-combinaMazo(mazo)
n=nrow(combina)
mano_salvada=c(0,0,0,0)
tot=0
media=0
for(i in 1:91)
{
for(j in 1:16)
{
media=media+pesos[i,j]
if(pesos[i,j]!=0)
{
tot=tot+1
}
}
}
media_f=media/tot
for(i in 1:n)
{
mano_op<-fijarMano(combina[i,1],combina[i,2],combina[i,3],combina[i,4])
peso<-leerPesos(mano_op,pesos)
if(peso>media_f)
{
mano_salvada=rbind(mano_salvada,c(combina[i,1],combina[i,2],combina[i,3],combina[i,4]))
}
}
mano_salvada
media_f
View(pesos)
mesa
aux=0
dim(pesos)
}
for(i in 1:91)
{
for(j in 1:16)
{if(pesos[i,j]==1)
{aux=aux+1}
}
}
aux
mano
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
pesos<-cargaPesos()
pesos<-descartePesosFlop(mesa,mazo,pesos)
mesa
mesa<-fijarMesaFlop(mn1,mp1,mn2,mp2,mn3,mp3)
mesa<-read.csv("mesa.csv",header=TRUE, sep=",", row.names=NULL)
mesa
mesa=mesa[-4,]
mesa
pesos<-descartePesosFlop(mesa,mazo,pesos)
mazo<-descarteCartas(mesa,mazo)
pesos<-descartePesosFlop(mesa,mazo,pesos)
mazo
mesa
datos<-descartePesosCarta(mesa[1,],mazo,datos)
datos=pesos
datos<-descartePesosCarta(mesa[1,],mazo,datos)
View(datos)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
datos<-descartePesosCarta(mesa[1,],mazo,datos)
View(datos)
mazo<-crearMazo()
mazo<-descarteCartas(mano,mazo)
datos<-descartePesosCarta(mesa[1,],mazo,datos)
datos<-descartePesosCarta(mesa[2,],mazo,datos)
inicializa()
r<-plumb("plumber.R")
r$run(port=8000)
mn1=9
mp1=1
mn2=4
mp2=4
mano<-fijarMano(mn1,mp1,mn2,mp2)
a=1
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-descarteCartas(mano,mazo)
pesos<-cargaPesos()
triple<-cargaTriple()
pesos<-descartePesosMano(mano,mazo,pesos)
triple<-descarteTripleMano(mano,mazo,triple)
salida<-calculaProbPreflop(mano,mazo,a)
source("inicializa.R")
inicializa()
options(error=recover)
r<-plumb("plumber.R")
r$run(port=8000)
mn1=9
mp1=1
mn2=4
mp2=3
a=2
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-descarteCartas(mano,mazo)
mano<-fijarMano(mn1,mp1,mn2,mp2)
a<-strtoi(a)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-descarteCartas(mano,mazo)
pesos<-cargaPesos()
triple<-cargaTriple()
pesos<-descartePesosMano(mano,mazo,pesos)
triple<-descarteTripleMano(mano,mazo,triple)
if(accion==2)
{
valoresPreflop<-rbind(c(0,0.2,0.8),c(0,0.8,0.2),c(0.85,0.1,0.05),c(0.99,0.01,0))
}
else
{
valoresPreflop<-rbind(c(0,0.1,0.9),c(0,0.25,0.75),c(0.25,0.65,0.10),c(0.69,0.3,0.01),c(0.99,0.01,0))
}
b<-0
chen<-chenFormula(mano)
if(accion==2)
{
if (chen>=12)
{
b=1
}
if (chen==11)
{
b=2
}
if (chen ==10)
{
b=2
}
if(chen<10)
{
if (chen>5)
{
b=3
}
}
if(chen ==5)
{
if(mano[1,1]==mano[2,1])
{
b=3
}
else
{
b=4
}
}
if (chen<5)
{
b=4
}
}
else
{
if (chen>=12)
{
b=1
}
if (chen==11)
{
b=2
}
if (chen ==10)
{
b=2
}
if(chen<10)
{
if (chen>5)
{
b=3
}
}
if(chen ==5)
{
if(mano[1,1]==mano[2,1])
{
b=3
}
else
{
b=4
}
}
if (chen<5)
{
if(chen>=3.5)
{
b=4
}
else
{
b=5
}
}
}
prob<-valoresPreflop[b,]
prob
chen
prob_data=prob
prob_data
inicializa()
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
aa=30
ao=30
a=1
pesos<-cargaPesos()
triple<-cargaTriple()
source("inicializa.R")
inicializa()
pesos<-cargaPesos()
triple<-cargaTriple()
salida<-calculaProbFlop(mano,mesa,mazo,pesos,aa,ao,a)
mesa<-read.csv("mesa.csv",header=TRUE, sep=",", row.names=NULL)
salida<-calculaProbFlop(mano,mesa,mazo,pesos,aa,ao,a)
salida
prob<-rbind(0.00000000007,0.293421346,0.70657865)
prob_<-read.csv("prob.csv",header=TRUE,row.names = NULL)
prob_
prob
prob_[1,]=prob[1,]
prob_[2,]=prob[2,]
prob_[3,]=prob[3,]
prob=prob_
prob
write.csv(prob,"prob.csv",row.names = FALSE)
salida<-calculaProbFlop(mano,mesa,mazo,pesos,aa,ao,a)
salida
inicializa()
r<-plumb("plumber.R")
r$run(port=8000)
r$run(port=8000)
r$run(port=1500)
r$run(port=8000)
r
r
r$run(port = 8000)
r$run(port = 8000)
inicializa()
r$run(port = 8000)
r<-plumb("plumber.R")
r$run(port = 8000)
source("inicializa.R")
inicializa()
r<-plumb("plumber.R")
r$run(port = 8000)
inicializa()
r$run(port = 8000)
inicializa()
r$run(port = 8000)
inicializa()
r$run(port = 8000)
inicializa()
r$run(port = 8000)
r<-plumb("plumber.R")
inicializa()
r$run(port = 8000)
inicializa()
r$run(port = 8000)
inicializa()
r$run(port=8000)
inicializa()
r<-plumb("plumber.R")
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
r<-plumb("plumber.R")
source("ajusteBayes.R")
r<-plumb("plumber.R")
r$run(port=8000)
source("ajusteBayes.R")
source("accionBayes.R")
r<-plumb("plumber.R")
r$run(port=8000)
source("ajusteBayes.R")
r<-plumb("plumber.R")
r$run(port=8000)
View(ajusteBayes)
View(ajusteBayes)
View(actualizaPesos_op)
source("calculoProbabilidadAccion.R")
r<-plumb("plumber.R")
r$run(port=8000)
source("calculoProbabilidadAccion.R")
source("calculoProbabilidadAccion.R")
r<-plumb("plumber.R")
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r$run(port=8000)
inicializa()
r<-plumb("plumber.R")
r$run(port=8000)
