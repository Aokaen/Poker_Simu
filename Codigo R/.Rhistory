}
}
if(prob[2,1]>prob[1,1])
{
if(prob[2,1]>prob[3,1])
{
if(ronda==1)
{
valor_op<-chenFormula(mano_op)
if(valor_op>=12)
{
value=data[3,]
}
else if(valor_op>=7)
{
value=data[4,]
}
else
{
value=data[5,]
}
}
else
{
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
if(valor_op>=7)
{
value=data[2,]
}
else if(valor_op>=2)
{
value=data[3,]
}
else
{
value=data[4,]
}
}
}
}
if(prob[3,1]>prob[2,1])
{
if(prob[3,1]>prob[1,1])
{
if(ronda==1)
{
value=data[6,]
}
else
{
value=data[5,]
}
}
}
triple<-modificaTriple(mano_op,triple,value)
}
View(triple)
test_reset()
test_preflopini(13,4,12,2)
test_preflopact(2)
inicializa()
test_reset()
test_preflopini(13,4,12,2)
test_preflopact(2)
source("test.R")
test_reset()
test_preflopini(13,4,12,2)
test_preflopact(2)
test_flopini(7,3,2,2,11,4,75,75)
View(calcularPotencial)
View(calculaProbFlop)
View(test_flopini)
View(calculaProbFlop)
View(calcularPotencial)
View(ordenarCartas)
inicializa()
test_flopini(7,3,2,2,11,4,75,75)
inicializa()
test_flopini(7,3,2,2,11,4,75,75)
View(calcularFuerzaMano)
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
pesos<-cargaPesos()
triple<-cargaTriple()
mesa<-fijarMesaFlop(7, 3, 2, 2, 11, 4)
mazo<-descarteCartas(mesa,mazo)
pesos<-descartePesosFlop(mesa,mazo,pesos)
triple<-descarteTripleFlop(mesa,mazo,triple)
pesos<-actualizaPesos(1,pesos,triple)
VPT<-c(0,0,0)
VP<-matrix(0,nrow=3, ncol=3)
x=-1
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
i=1
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
peso_mano<-leerPesos(mano_op,pesos)
mazoaux<-descarteCartas(mano_op,mazo)
n_mazoaux<-nrow(mazoaux)
valor_op>valorjugador
x=1
peso_mano
VPT[x]<-VPT[x]+peso_mano
j=1
mesaaux<-rbind(mesa,mazoaux[j,])
mesa
mazoaux[1,]
mano_op
mazo[1,]
VPT<-c(0,0,0)
VP<-matrix(0,nrow=3, ncol=3)
x=-1
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
colnames(mazo)<-NULL
colnames(mazoaux)<-NULL
mesaaux<-rbind(mesa,mazoaux[j,])
mazoaux
colnames(mazoaux)<-colnames(mesa)
mesaaux<-rbind(mesa,mazoaux[j,])
mazoaux
colnames(mesa)
colnames(mazoaux)
mazoaux<-descarteCartas(mano_op,mazo)
mesaaux<-rbind(mesa,c(as.numeric(mazoaux[j,1]),as.numeric(mazoaux[j,2]))
)
mesaaux
inicializa()
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
pesos<-cargaPesos()
triple<-cargaTriple()
mesa<-fijarMesaFlop(mn1,mp1,mn2,mp2,mn3,mp3)
mazo<-descarteCartas(mesa,mazo)
pesos<-descartePesosFlop(mesa,mazo,pesos)
triple<-descarteTripleFlop(mesa,mazo,triple)
pesos<-actualizaPesos(1,pesos,triple)
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
pesos<-cargaPesos()
triple<-cargaTriple()
mesa<-fijarMesaFlop(7, 3, 2, 2, 11, 4)
mazo<-descarteCartas(mesa,mazo)
pesos<-descartePesosFlop(mesa,mazo,pesos)
triple<-descarteTripleFlop(mesa,mazo,triple)
pesos<-actualizaPesos(1,pesos,triple)
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
pesos<-cargaPesos()
triple<-cargaTriple()
mesa<-fijarMesaFlop(7, 3, 2, 2, 11, 4)
mazo<-descarteCartas(mesa,mazo)
pesos<-descartePesosFlop(mesa,mazo,pesos)
triple<-descarteTripleFlop(mesa,mazo,triple)
pesos<-actualizaPesos(1,pesos,triple)
FM<-calcularFuerzaMano(mano,mesa,mazo,pesos)
FM
POT<-calcularPotencial(mano,mesa,mazo,pesos)
POT
VPT<-c(0,0,0)
VP<-matrix(0,nrow=3, ncol=3)
x=-1
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
VPT
VP
for(i in 1:n_manos)
{
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
peso_mano<-leerPesos(mano_op,pesos)
mazoaux<-descarteCartas(mano_op,mazo)
n_mazoaux<-nrow(mazoaux)
colnames(mazoaux)<-NULL
if(valor_op>valorjugador)
{
x=1
}
if(valor_op==valorjugador)
{
x=2
}
if(valor_op<valorjugador)
{
x=3
}
VPT[x]<-VPT[x]+peso_mano
for(j in 1:n_mazoaux)
{
mesaaux<-rbind(mesa,c(as.numeric(mazoaux[j,1]),as.numeric(mazoaux[j,2])))
jugada_aux<-ordenarCartas(mano,mesaaux)
jugada_op_aux<-ordenarCartas(mano_op,mesaaux)
valorjugador_aux<-calcularJugada(jugada_aux)
valor_op_aux<-calcularJugada(jugada_op_aux)
if(valor_op_aux>valorjugador_aux)
{
VP[x,1]<-VP[x,1]+peso_mano
}
if(valor_op_aux==valorjugador_aux)
{
VP[x,2]<-VP[x,2]+peso_mano
}
if(valor_op_aux<valorjugador_aux)
{
VP[x,3]<-VP[x,3]+peso_mano
}
}
}
VPT
VP
PotPositivo<-VP[1,2]/VPT[1]
PotNegativo<-VP[3,1]/VPT[3]
Pot<-c(PotPositivo,PotNegativo)
OdMano<-calculoOddMano(mano,mesa,mazo)
POT
View(calculoOddMano)
inicializa()
OdMano<-calculoOddMano(mano,mesa,mazo)
OdMano
OdBote<-calculoOddsBote(75,75)
View(calculoOddsBote)
inicializa()
OdBote<-calculoOddsBote(75,75)
s=FM[3]+(1-FM[3])*POT[1]+(OdMano-OdBote)
p=FM[1]+(1-FM[1])*POT[2]+(OdBote-OdMano)
v=1-(s+p)
salida=c(p,v,s)
salida
s=FM[3]+(1-FM[3])*POT[1]+(OdMano-OdBote)
FM[3]
FM
OdMano
POT[1]*OdMano
OdBote
POT<-calcularPotencial(mano,mesa,mazo,pesos)
POT
inicializa()
POT<-calcularPotencial(mano,mesa,mazo,pesos)
POT
s=FM[3]+(1-FM[3])*POT[1]+(OdMano-OdBote)
p=FM[1]+(1-FM[1])*POT[2]+(OdBote-OdMano)
v=1-(s+p)
S
s
p
v
VPT<-c(0,0,0)
VP<-matrix(0,nrow=3, ncol=3)
x=-1
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
for(i in 1:n_manos)
{
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
peso_mano<-leerPesos(mano_op,pesos)
mazoaux<-descarteCartas(mano_op,mazo)
n_mazoaux<-nrow(mazoaux)
colnames(mazoaux)<-NULL
if(valor_op>valorjugador)
{
x=1
}
if(valor_op==valorjugador)
{
x=2
}
if(valor_op<valorjugador)
{
x=3
}
for(j in 1:n_mazoaux)
{
VPT[x]<-VPT[x]+peso_mano
mesaaux<-rbind(mesa,c(as.numeric(mazoaux[j,1]),as.numeric(mazoaux[j,2])))
jugada_aux<-ordenarCartas(mano,mesaaux)
jugada_op_aux<-ordenarCartas(mano_op,mesaaux)
valorjugador_aux<-calcularJugada(jugada_aux)
valor_op_aux<-calcularJugada(jugada_op_aux)
if(valor_op_aux>valorjugador_aux)
{
VP[x,1]<-VP[x,1]+peso_mano
}
if(valor_op_aux==valorjugador_aux)
{
VP[x,2]<-VP[x,2]+peso_mano
}
if(valor_op_aux<valorjugador_aux)
{
VP[x,3]<-VP[x,3]+peso_mano
}
}
}
PotPositivo<-VP[1,2]/VPT[1]
PotNegativo<-VP[3,1]/VPT[3]
Pot<-c(PotPositivo,PotNegativo)
Pot
VPT[3]
VP[3]
VP[3,1]
VP
VPT
VPT<-c(0,0,0)
VP<-matrix(0,nrow=3, ncol=3)
x=-1
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
for(i in 1:n_manos)
{
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
peso_mano<-leerPesos(mano_op,pesos)
mazoaux<-descarteCartas(mano_op,mazo)
n_mazoaux<-nrow(mazoaux)
colnames(mazoaux)<-NULL
if(valor_op>valorjugador)
{
x=1
}
if(valor_op==valorjugador)
{
x=2
}
if(valor_op<valorjugador)
{
x=3
}
for(j in 1:n_mazoaux)
{
VPT[x]<-VPT[x]+peso_mano
mesaaux<-rbind(mesa,c(as.numeric(mazoaux[j,1]),as.numeric(mazoaux[j,2])))
jugada_aux<-ordenarCartas(mano,mesaaux)
jugada_op_aux<-ordenarCartas(mano_op,mesaaux)
valorjugador_aux<-calcularJugada(jugada_aux)
valor_op_aux<-calcularJugada(jugada_op_aux)
if(valor_op_aux>valorjugador_aux)
{
VP[x,1]<-VP[x,1]+peso_mano
}
if(valor_op_aux==valorjugador_aux)
{
VP[x,2]<-VP[x,2]+peso_mano
}
if(valor_op_aux<valorjugador_aux)
{
VP[x,3]<-VP[x,3]+peso_mano
}
}
}
if(VPT[1]==0)
{
PotPositivo=0
}else{
PotPositivo<-VP[1,2]/VPT[1]
}
if(VPT[3]==0)
{
PotNegativo=0
}else{
PotNegativo<-VP[3,1]/VPT[3]
}
Pot<-c(PotPositivo,PotNegativo)
Pot
View(calcularFuerzaMano)
FM
s=FM[3]+(1-FM[3])*POT[1]+(OdMano-OdBote)
p=FM[1]+(1-FM[1])*POT[2]+(OdBote-OdMano)
v=1-(s+p)
s
p
v
POT<-Pot
s=FM[3]+(1-FM[3])*POT[1]+(OdMano-OdBote)
p=FM[1]+(1-FM[1])*POT[2]+(OdBote-OdMano)
v=1-(s+p)
s
p
v
s=FM[3]+(1-FM[3])*POT[1]+(OdMano-OdBote)
p=FM[1]+(1-FM[1])*POT[2]+(OdBote-OdMano)
v=1-(s+p)
s
s=FM[3]+(1-FM[3])*POT[1]*(OdMano)+OdBote
p=FM[1]+(1-FM[1])*POT[2]*OdMano-OdBote
v=1-(s+p)
salida=c(p,v,s)
salida
FM<-calcularFuerzaMano(mano,mesa,mazo,pesos) #(inf,igual,sup)
POT<-calcularPotencial(mano,mesa,mazo,pesos) #(Positivo,negativo)
OdMano<-calculoOddMano(mano,mesa,mazo)
OdBote<-calculoOddsBote(aa,ao)
s=FM[3]+(1-FM[3])*POT[1]*(OdMano)+OdBote
p=FM[1]+(1-FM[1])*POT[2]*OdMano-OdBote
v=1-(s+p)
salida=c(p,v,s)
orden<-ordenarCartas(mano,mesa)
valorjugada<-calcularJugada(orden)
salida=ajusteBayes(triple, accion, 2,valorjugada)
return(salida)
inicializa()
View(calculaProbFlop)
FM<-calcularFuerzaMano(mano,mesa,mazo,pesos) #(inf,igual,sup)
POT<-calcularPotencial(mano,mesa,mazo,pesos) #(Positivo,negativo)
OdMano<-calculoOddMano(mano,mesa,mazo)
OdBote<-calculoOddsBote(75,75)
s=FM[3]+(1-FM[3])*POT[1]*(OdMano)+OdBote
p=FM[1]+(1-FM[1])*POT[2]*OdMano-OdBote
v=1-(s+p)
salida=c(p,v,s)
orden<-ordenarCartas(mano,mesa)
valorjugada<-calcularJugada(orden)
salida=ajusteBayes(triple, 2, 2,valorjugada)
salida
FM
POT
OdMano
OdBote
salida=c(p,v,s)
orden<-ordenarCartas(mano,mesa)
valorjugada<-calcularJugada(orden)
salida=ajusteBayes(salida, accion, 2,valorjugada)
salida=c(p,v,s)
orden<-ordenarCartas(mano,mesa)
valorjugada<-calcularJugada(orden)
salida=ajusteBayes(salida, 1, 2,valorjugada)
salida
p
s
v
triple<-calculoProbabilidadAccion(mesa,mazo,triple,2)
View(triple)
View(calculoProbabilidadAccion)
prob<-read.csv("prob.csv",header=TRUE,row.names = NULL)
prob
data<-read.csv("tablaspostflop.csv",header=TRUE,row.names = NULL)
combina<-combinaMazo(mazo)
n<-nrow(combina)
test_reset()
inicializa()
test_preflopini(13,4,12,2)
test_preflopact(2)
test_flopini(7,3,2,2,11,4,75,75)
library(holdem)
test_flopini(7,3,2,2,11,4,75,75)
View(test_flopini)
View(calculoProbabilidadAccion)
View(calculaProbFlop)
test_flopini(7,3,2,2,11,4,75,75)
inicializa()
test_flopini(7,3,2,2,11,4,75,75)
source("test.R")
test_flopini(7,3,2,2,11,4,75,75)
test_flopact(2,75,100)
View(calculaProbFlop)
source("test.R")
test_flopact(2,75,100)
inicializa()
test_flopact(2,75,100)
0.4200537+0.437955+0.1419907
test_turnini(2,4,100,100)
View(descartePesosCarta)
inicializa()
test_turnini(2,4,100,100)
inicializa()
test_turnini(2,4,100,100)
0.49524630+0.4565155+0.05210215
test_riverini(12,1)
test_riveract(2)
test_riveract(2)
mano<-read.csv("mano.csv",header=TRUE, sep=",", row.names=NULL)
mazo<-read.csv("deck.csv",header=TRUE, sep=",", row.names=NULL)
mesa<-read.csv("mesa.csv",header=TRUE, sep=",", row.names=NULL)
pesos<-cargaPesos()
triple<-cargaTriple()
View(pesos)
pesos<-actualizaPesos(2,pesos,triple)
View(pesos)
pesos<-actualizaPesos(2,pesos,triple)
View(pesos)
salida<-calculaProbRiver(mano,mesa,mazo,pesos,a)
salida
test_reset()
test_preflop(7,1,5,2,2)
test_flop(7,2,4,2,2,2,2,50,75)
source(("test.R"))
test_flop(7,2,4,2,2,2,2,50,75)
test_turn(5,1,100,100,1)
test_river(7,3,1)
test_riveract(2)
test_riveract(0)
test_riveract(2)
test_riveract(0)
View(calculaProbRiver)
View(ajusteBayes)
prab<-read.csv("prob.csv",header=TRUE,row.names = NULL)
test_riveract(0)
