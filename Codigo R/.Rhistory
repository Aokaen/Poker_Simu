mazoaux<-crearMazo()
mazoaux
combina_triple<-combinaMazo(mazoaux)
combina_triple
n_comb<-nrow(combinaTriple)
n_comb<-nrow(combinatriple)
n_comb<-nrow(combina_triple)
n_comb
combina_triple[1,]
detecta<-function(combina_triple,n_comb)
{
x<-c(0,0,0,0)
for(i in 1:n_comb)
{
if(combina_triple[i,1]==combina_triple[i,3])
{
if(combina_triple[1,2]==combina_triple[i,4])
{
x<-combina_triple[i,]
}
}
}
return(x)
}
detecta(combina_triple)
detecta(combina_triple,n_comb)
x<-detecta(combina_triple,n_comb)
x
colnames(combina_triple)<-c("Num","Palo","Num","Palo")
combina_triple
nrow(combina_triple)
creaDatos<-function(combina_triple)
{
n_comb<-nrow(combina_triple)
for(i in 1:n_comb)
{
creaDatos<-function(combina_triple)
{
n_comb<-nrow(combina_triple)
triple<-c(0,0,0,0,0,0,0)
for(i in 1:n_comb)
{
triple<-rbind(triple,c(combina_triple[i,],1,1,1))
}
triple<-triple[-1,]
colname(triple)<-c("Num","Palo","Num","Palo","Pasar","Ver","Subir")
return(triple)
}
triple<-creaDatps(combina_triple)
triple<-creaDatos(combina_triple)
> creaDatos<-function(combina_triple)
+ {
+ n_comb<-nrow(combina_triple)
+ triple<-c(0,0,0,0,0,0,0)
+ for(i in 1:n_comb)
+ {
+ triple<-rbind(triple,c(combina_triple[i,],1,1,1))
+ }
+ triple<-triple[-1,]
+ colname(triple)<-c("Num","Palo","Num","Palo","Pasar","Ver","Subir")
+ return(triple)
+ }
creaDatos<-function(combina_triple)
colname<-function(triple)
{
creaDatos<-function(combina_triple)
 {
 n_comb<-nrow(combina_triple)
 triple<-c(0,0,0,0,0,0,0)
 for(i in 1:n_comb)
 {
 triple<-rbind(triple,c(combina_triple[i,],1,1,1))
 }
 triple<-triple[-1,]
 colnames(triple)<-c("Num","Palo","Num","Palo","Pasar","Ver","Subir")
 return(triple)
 }
> triple<-creaDatps(combina_triple)
creaDatos<-function(combina_triple)
 {
 n_comb<-nrow(combina_triple)
 triple<-c(0,0,0,0,0,0,0)
 for(i in 1:n_comb)
 {
 triple<-rbind(triple,c(combina_triple[i,],1,1,1))
 }
 triple<-triple[-1,]
 colnames(triple)<-c("Num","Palo","Num","Palo","Pasar","Ver","Subir")
 return(triple)
 }
triple<-creaDatps(combina_triple)
creaDatos<-function(combina_triple)
 {
 n_comb<-nrow(combina_triple)
 triple<-c(0,0,0,0,0,0,0)
 for(i in 1:n_comb)
 {
 triple<-rbind(triple,c(combina_triple[i,],1,1,1))
 }
 triple<-triple[-1,]
 colnames(triple)<-c("Num","Palo","Num","Palo","Pasar","Ver","Subir")
 return(triple)
 }
triple<-creaDatos(combina_triple
triple
triple<-creaDatos(combina_triple)
triple
write.csv(triple, file="triple.csv")
CargaTriple<-function()
{
data<-read.csv("triple.csv",header=TRUE,row.names=1)
colnames(data)<-c("Num","Palo","Num","Palo","Pasar","Ver","Subir")
return(data)
}
triplazo<-CargaTriple()
CargaTriple<-function()
{
data<-read.csv("triple.csv",header=TRUE,row.names=1)
colnames(data)<-c("Num1","Palo1","Num2","Palo2","Pasar","Ver","Subir")
return(data)
}
triplazo<-CargaTriple()
triplazo<-CargaTriple()
CargaTriple<-function()
{
data<-read.csv("triple.csv",header=false,row.names=1)
colnames(data)<-c("Num1","Palo1","Num2","Palo2","Pasar","Ver","Subir")
return(data)
}
triplazo<-CargaTriple()
ls()
header
0
CargaTriple<-function()
{
data<-read.csv("triple.csv",header=false)
colnames(data)<-c("Num1","Palo1","Num2","Palo2","Pasar","Ver","Subir")
return(data)
}
triplazo<-CargaTriple()
CargaTriple<-function()
{
data<-read.csv("triple.csv",header=FALSE)
colnames(data)<-c("Num1","Palo1","Num2","Palo2","Pasar","Ver","Subir")
return(data)
}
triplazo<-CargaTriple()
triplazo
triplazo<-read.csv("triple.csv",header=FALSE)
triplazo
write.csv(triple, file="triple.csv",row.names = F)
triplazo<-read.csv("triple.csv",header=FALSE)
triplazo
triplazo[2,1]
triplazo[1,]
triplazo[2,]
CargaTriple<-function()
{
data<-read.csv("triple.csv",header=TRUE,row.names=1)
colnames(data)<-c("Num1","Palo1","Num2","Palo2","Pasar","Ver","Subir")
return(data)
}
triplazo<-CargaTriple()
write.csv(triple, file="triple.csv",row.names = F)
triplazo<-read.csv("triple.csv",header=TRUE,row.names=1)
triplazo<-read.csv("triple.csv",header=TRUE)
triplazos
triplazo
ncol(triplazo)
triplazo[1322]
triplazo[1322,]
CargaTriple<-function()
{
data<-read.csv("triple.csv",header=TRUE)
colnames(data)<-c("Num1","Palo1","Num2","Palo2","Pasar","Ver","Subir")
return(data)
}
triplazo<-CargaTriple()
triplazo
modificaTriple<-function(mano,data,valores)
{
{
if(mano[1,1]<mano[2,1])
{
Num1<-mano[1,1]
Num2<-mano[2,1]
Palo1<-mano[1,2]
Palo2<-mano[2,2]
}
if(mano[1,1]>mano[2,1])
{
Num2<-mano[1,1]
Num1<-mano[2,1]
Palo2<-mano[1,2]
Palo1<-mano[2,2]
}
if(mano[1,1]==mano[2,1])
{
Num1<-mano[1,1]
Num2<-mano[2,1]
if(mano[1,2]>mano[2,2])
{
Palo2<-mano[1,2]
Palo1<-mano[2,2]
}
else
{
Palo1<-mano[1,2]
Palo2<-mano[2,2]
}
}
n_filas=nrow(data)
for(i in 1:n_filas)
{
if(Num1==data[i,1])
{
if(Palo1==data[i,2])
{
if(Num2==data[i,3])
{
if(Palo2==data[i,4])
{
data[i,5]<-valores[1]
data[i,6]<-valores[2]
data[i,7]<-valores[3]
}
}
}
}
}
return(data)
}
}
modificaTriple<-function(mano,datos,valores)
{
if(mano[1,1]<mano[2,1])
{
Num1<-mano[1,1]
Num2<-mano[2,1]
Palo1<-mano[1,2]
Palo2<-mano[2,2]
}
if(mano[1,1]>mano[2,1])
{
Num2<-mano[1,1]
Num1<-mano[2,1]
Palo2<-mano[1,2]
Palo1<-mano[2,2]
}
if(mano[1,1]==mano[2,1])
{
Num1<-mano[1,1]
Num2<-mano[2,1]
if(mano[1,2]>mano[2,2])
{
Palo2<-mano[1,2]
Palo1<-mano[2,2]
}
else
{
Palo1<-mano[1,2]
Palo2<-mano[2,2]
}
}
n_filas=nrow(datos)
for(i in 1:n_filas)
{
if(Num1==datos[i,1])
{
if(Palo1==datos[i,2])
{
if(Num2==datos[i,3])
{
if(Palo2==datos[i,4])
{
datos[i,5]<-valores[1]
datos[i,6]<-valores[2]
datos[i,7]<-valores[3]
}
}
}
}
}
return(datos)
}
calculoProbabilidadAccion<-function(mesa,mazo,triple)
{
inferior=0
superior=0
igual=0
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
for(i in 1:n_manos)
{
valor<-c(0,0,0)
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
mazoaux<-descarteCartas(mano_op,mazo)
comb_aux<-combinaMazo(mazoaux)
n_manos_aux<-nrow(comb_aux)
for(j in 1:n_manos_aux)
{
mano_aux<-fijarMano(comb_aux[j,1],comb_aux[j,2],comb_aux[j,3],comb_aux[j,4])
jugada_aux<-ordenarCartas(mano_aux,mesa)
valor_aux<-calcularJugada(jugada_aux)
if(valor_op>valor_aux)
{
superior=superior+1
}
if(valor_op==valor_aux)
{
igual=igual+1
}
if(valor_op<valor_aux)
{
inferior=inferior+1
}
}
total=superior+igual+inferior
valor[1]=superior/total #pasar
valor[2]=igual/total#ver
valor[3]=inferior/total#subir
triple<-modificaTriple(mano_op,triple,valor)
}
return (triple)
}
calculaProbRiver(mano,mesa,mazo,pesos)
{
inferiores=0
iguales=0
superiores=0
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
for(i in 1:n_manos)
{
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
peso_mano<-Leer(mano_op,pesos)
if(valor_op>valorjugador)
{
superiores=superiores+peso_mano
}
if(valor_op==valorjugador)
{
iguales=iguales+peso_mano
}
if(valor_op<valorjugador)
{
inferiores=inferiores+peso_mano
}
}
NT=(superiores+iguales+inferiores)
s=(inferiores/NT)
v=(iguales/NT)
p=(superiores/NT)
prob<-c(p,v,s)
return(prob)
}
calculaProbRiver<-function(mano,mesa,mazo,pesos)
{
inferiores=0
iguales=0
superiores=0
jugada=ordenarCartas(mano,mesa)
valorjugador=calcularJugada(jugada)
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
for(i in 1:n_manos)
{
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
peso_mano<-Leer(mano_op,pesos)
if(valor_op>valorjugador)
{
superiores=superiores+peso_mano
}
if(valor_op==valorjugador)
{
iguales=iguales+peso_mano
}
if(valor_op<valorjugador)
{
inferiores=inferiores+peso_mano
}
}
NT=(superiores+iguales+inferiores)
s=(inferiores/NT)
v=(iguales/NT)
p=(superiores/NT)
prob<-c(p,v,s)
return(prob)
}
calculoProbabilidadAccion<-function(mesa,mazo,triple)
{
inferior=0
superior=0
igual=0
combinaciones<-combinaMazo(mazo)
n_manos<-nrow(combinaciones)
for(i in 1:n_manos)
{
valor<-c(0,0,0)
mano_op<-fijarMano(combinaciones[i,1],combinaciones[i,2],combinaciones[i,3],combinaciones[i,4])
jugada_op=ordenarCartas(mano_op,mesa)
valor_op<-calcularJugada(jugada_op)
mazoaux<-descarteCartas(mano_op,mazo)
comb_aux<-combinaMazo(mazoaux)
n_manos_aux<-nrow(comb_aux)
for(j in 1:n_manos_aux)
{
mano_aux<-fijarMano(comb_aux[j,1],comb_aux[j,2],comb_aux[j,3],comb_aux[j,4])
jugada_aux<-ordenarCartas(mano_aux,mesa)
valor_aux<-calcularJugada(jugada_aux)
if(valor_op>valor_aux)
{
superior=superior+1
}
if(valor_op==valor_aux)
{
igual=igual+1
}
if(valor_op<valor_aux)
{
inferior=inferior+1
}
}
total=superior+igual+inferior
valor[1]=superior/total #pasar
valor[2]=igual/total#ver
valor[3]=inferior/total#subir
triple<-modificaTriple(mano_op,triple,valor)
}
return (triple)
}
q()
modificaTriple<-function(mano,datos)
{
if(mano[1,1]<mano[2,1])
{
Num1<-mano[1,1]
Num2<-mano[2,1]
Palo1<-mano[1,2]
Palo2<-mano[2,2]
}
if(mano[1,1]>mano[2,1])
{
Num2<-mano[1,1]
Num1<-mano[2,1]
Palo2<-mano[1,2]
Palo1<-mano[2,2]
}
if(mano[1,1]==mano[2,1])
{
Num1<-mano[1,1]
Num2<-mano[2,1]
if(mano[1,2]>mano[2,2])
{
Palo2<-mano[1,2]
Palo1<-mano[2,2]
}
else
{
Palo1<-mano[1,2]
Palo2<-mano[2,2]
}
}
n_filas=nrow(datos)
for(i in 1:n_filas)
{
if(Num1==datos[i,1])
{
if(Palo1==datos[i,2])
{
if(Num2==datos[i,3])
{
if(Palo2==datos[i,4])
{
valores[1]<-datos[i,5]
valores[2]<-datos[i,6]
valores[3]<-datos[i,7]
}
}
}
}
}
return(valores)
}
rm(list=ls(all=TRUE))
source("inicializa.R")
inicializa()
ls()
mazo<-crearMazo()
jugada<-ncartasRandom(5,mazo)
jugada
rm(jugada)
mano<-ncartasRandom(2,mazo)
mesa<-ncartasRandom(3,mazo)
jugada<-ordenarCartas(mano,mesa)
jugada
valor<-calcularJugada(jugada)
valor
q()
ls()
rm(list=ls(all=TRUE))
source("inicializa.R")
inicializa()
q()
